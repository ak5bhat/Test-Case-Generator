const http = require('http');
const fs = require('fs');
const path = require('path');

const express = require('express'); 
const bodyParser = require('body-parser'); 
const cors = require('cors');
const { Configuration, OpenAIApi } = require("openai");

//-----------------------------------------------EXPRESS INITIALIZE
const app = express();
//-----------------------------------------------JSON PARSER
app.use(bodyParser.json());
//-----------------------------------------------CORS
app.use(cors()); 

app.post('/',async (req,res)=>{
    let tcase = req.body.tcase; //unit testing
    let lang = req.body.lang;   //python
    let query = req.body.query; //bubble sort
    let ans = '';
    let ques = '';
    switch(tcase){
        case 'unit testing':
            ques = `Write test cases in python code for unit testing that test addition of two numbers. First write the entire full logic code. Second, write Test Case Name, Test objective, Unit under Test, Preconditions, Inputs, Expected Results, Pass Criteria, Fail Criteria after three dollars '$$$' and also place "***" before Expected results (dont forget)\n\nAnswer: \nimport unittest\n\ndef add_two_numbers(a, b):\n    # Addition logic here\n    return a + b\n\nclass TestAddition(unittest.TestCase):\n\n    def test_valid_addition(self):\n        result = add_two_numbers(2, 3)\n        self.assertEqual(result, 5)\n\n    def test_negative_numbers(self):\n        result = add_two_numbers(-2, -3)\n        self.assertEqual(result, -5)\n\n    def test_zero_as_operand(self):\n        result = add_two_numbers(2, 0)\n        self.assertEqual(result, 2)\n\n    def test_decimal_numbers(self):\n        result = add_two_numbers(1.5, 2.5)\n        self.assertAlmostEqual(result, 4.0, places=4)\n\n    def test_large_numbers(self):\n        result = add_two_numbers(1000000, 2000000)\n        self.assertEqual(result, 3000000)\n\n    def test_non_numeric_input(self):\n        with self.assertRaises(TypeError):\n            add_two_numbers(\"abc\", 2)\n\nif __name__ == '__main__':\n    unittest.main()\n\n$$$\nTest Case Name: Addition of two numbers\nTest Objective: To verify the correctedness of the addition operation.\nUnit under Test: Addition class or method\nPreconditions: None\nInputs: Two numbers to be added\n***\nExpected Results: The expected sum of the two numbers\nPass Criteria: The actual sum matches the expected sum.\nFail Criteria: The actual sum does not match the expected sum.\n##\nStatement: \nWrite test cases in ${lang} code for ${tcase} that test ${query}. Frist write the entire full logic code. Second, write Test Case Name, Test objective, Unit under Test, Preconditions, Inputs, Expected Results, Pass Criteria, Fail Criteria after three dollars '$$$' also place "***" before Expected results (dont forget)\n\nAnswer: `;
            break;
        case 'Functionality test case':
            ques = `Generate a test case on Functionality Test case for login page with test data at first. After test data place three '$$$' and after test steps place three '***' as shown\n\n- Valid Username: testuser123\n- Valid Password: Test@123\n$$$\nTest Case Name: Functionality Test for Login Page\n\nTest Objective: To verify the functionality of the login page and ensure that users can log in successfully with valid credentials.\n\nUnit under Test: Login Page\n\nPreconditions:\n1. The application is installed and accessible.\n2. The login page is displayed without any errors.\n\nTest Steps:\n1. Open the web application.\n2. Navigate to the login page.\n3. Verify that the login page is displayed with the following elements:\n   a. Username input field\n   b. Password input field\n   c. Login button\n4. Enter the valid test username and password into the respective input fields:\n   - Username: testuser123\n   - Password: Test@123\n5. Click the \"Login\" button.\n6. Wait for the login process to complete.\n***\nExpected Results:\n- The user should be successfully logged in and redirected to the application's dashboard or home page.\n- A success message or indicator should be displayed, confirming the successful login.\n\nPass Criteria:\n- The user is redirected to the application's dashboard or home page after clicking the \"Login\" button.\n- The application displays a success message or indicator confirming the successful login.\n\nFail Criteria:\n- The user encounters an error message during the login process.\n- The user is not redirected to the application's dashboard or home page after clicking the \"Login\" button.\n- The application displays an error message indicating a failed login attempt.\n\nNote: To test negative scenarios, you can also execute the test case with invalid test data, such as incorrect usernames or passwords, and verify that appropriate error messages are displayed, and login is not allowed with incorrect credentials.\n\nIt's important to perform the test with other combinations of test data, including invalid usernames and passwords, empty fields, and special characters, to ensure comprehensive test coverage for the login page's functionality.\n##\nGenerate a test case on Functionality Test case for ${query} with test data at first. After test data place three '$$$' and after test steps place three '***' as shown\n`;
            break;
        case 'Performance test case':
            ques = `Generate a test case on Performance test case for Website Response Time. Before Expected results, place '$$$' as shown\n\nTest Case Name: Website Response Time Performance Test\n\nTest Objective: To measure the website's response time under different user loads.\n\nTest Scenario:\n1. Simulate 100 users accessing the website simultaneously.\n2. Measure the average response time for each user request.\n3. Verify that the website response time meets the specified performance requirement (e.g., response time < 3 seconds).\n\nTest Setup:\n- Use a performance testing tool such as JMeter or Gatling to simulate user load and measure response times.\n- Ensure that the test environment is representative of the production environment to obtain accurate results.\n\nTest Steps:\n1. Set up the performance testing tool to simulate 100 virtual users.\n2. Configure the tool to distribute the user load evenly across the website pages.\n3. Start the performance test and monitor the response times for each user request.\n4. Continue the test for a defined duration to collect sufficient data.\n$$$\nExpected Results:\n- The average response time for all user requests is within the specified performance requirement (e.g., response time < 3 seconds).\n- The website handles the user load without critical performance degradation or errors.\n\nPass Criteria:\n- The average response time is within the specified performance requirement.\n- The website performs efficiently and meets the performance expectations under the given user load.\n\nPerformance Metrics:\n- Average Response Time: Measure the average time taken for each user request to receive a response from the website.\n- Throughput: Measure the number of requests processed per second or minute by the website.\n- Error Rate: Measure the percentage of failed requests or HTTP error codes (e.g., 404, 500) during the test.\n\nPerformance Analysis:\n- Analyze the collected performance data to identify any performance bottlenecks or areas for improvement.\n- Check for slow-performing pages, database queries, or external dependencies that may affect the overall response time.\n- Evaluate the impact of the user load on website performance and resource utilization.\n\nNotes:\n- Repeat the test with different user loads (e.g., 50, 200 users) to assess the website's scalability.\n- Performance testing should be performed on a staging or test environment to avoid affecting the live production system.\n- Keep the test duration long enough to collect a sufficient amount of data for reliable analysis.\n- If the test fails to meet the performance requirements, investigate and optimize the identified performance bottlenecks.\n\nThe goal of this performance test case is to ensure that the website can handle the specified user load while maintaining acceptable response times. It helps identify potential performance issues and enables you to optimize the website for better user experience and scalability.\n##\nGenerate a test case on Performance test case for ${query}. Before Expected results, place '$$$' as shown\n`;
            break;
        case 'UI test case':
            ques = `Generate a test case on User interface test case for Verifying page title. Before and after Test Data, place '$$$' as shown.\n\nTest Case Name: UI Test Case - Verify Page Title\n\nTest Objective: To verify that the page title is displayed correctly on the web page.\n\nUnit under Test: Web Page User Interface - Page Title\n\nTest Scenario:\n1. Open the web page in the browser.\n2. Retrieve the actual page title displayed in the browser's title bar.\n3. Compare the actual page title with the expected page title.\n\nTest Steps:\n1. Open the web page in the browser.\n2. Extract the actual page title using the browser's built-in method to retrieve the title.\n3. Compare the actual page title with the expected page title.\n\nExpected Results:\n- The actual page title matches the expected page title.\n\nPass Criteria:\n- The actual page title matches the expected page title, indicating that the page title is displayed correctly on the web page.\n$$$\nTest Data:\n- Expected Page Title: \"Your Expected Page Title\"\n\nNote: Replace \"Your Expected Page Title\" with the actual title of the web page as specified in the design or requirements.\n$$$\nTest Execution:\n\nTest Environment: Browser (e.g., Google Chrome, Mozilla Firefox, etc.)\n\nPreconditions:\n- The web page URL is accessible and functional.\n\nTest Execution Steps:\n1. Open the web page URL in the chosen browser.\n2. Wait for the page to load completely.\n\nTest Case Execution:\n1. Retrieve the actual page title using the browser's title retrieval method (e.g., document.title in JavaScript).\n2. Compare the actual page title with the expected page title provided in the test data.\n\nTest Case Result:\n- If the actual page title matches the expected page title, mark the test as Pass.\n- If the actual page title does not match the expected page title, mark the test as Fail.\n\nTest Notes:\n- The page title is a critical element of the user interface and should accurately reflect the content and purpose of the web page.\n- Ensure that the expected page title is correctly provided in the test data to ensure accurate comparison.\n- The test should be executed on different browsers and devices to verify consistent behavior.\n\nBy verifying the page title, you ensure that the title displayed in the browser accurately represents the content of the web page, which enhances user experience and SEO optimization.\n##\nGenerate a test case on User interface test case for ${query}. Before and after Test Data, place '$$$' as shown.\n`;
            break;
        case 'Security test case':
            ques = `Generate a test case on Security test case for Input Validation and Protection Against SQL Injection. Before and after Test Data, place '$$$' as shown.\n\nTest Case Name: Security Test Case - Input Validation and Protection Against SQL Injection\n\nTest Objective: To verify that the web application performs proper input validation and protects against SQL injection attacks.\n\nUnit under Test: Web Application\n\nTest Scenario:\n1. Open the web application in the browser.\n2. Access a page or feature that involves user input (e.g., login page, search functionality, user registration).\n3. Attempt to input malicious SQL injection code into the input fields.\n\nTest Steps:\n1. Open the web application in the browser.\n2. Identify a page or feature that accepts user input and interacts with the database (e.g., login form with email and password fields).\n3. Input the following SQL injection attempts in the input fields:\n   a. ' OR 1=1; -- (SQL injection to bypass login authentication)\n   b. DROP TABLE users; -- (SQL injection to delete a database table)\n   c. SELECT * FROM users WHERE email='user@example.com' AND password='' OR '1'='1'; -- (SQL injection to gain unauthorized access)\n4. Submit the form or trigger the action associated with the input field.\n\nExpected Results:\n- The web application should properly validate the input and prevent SQL injection attempts.\n- The application should either reject the input with an appropriate error message or safely handle the input without executing the malicious SQL queries.\n\nPass Criteria:\n- The web application successfully rejects the SQL injection attempts and provides appropriate error messages or takes necessary security measures to prevent unauthorized access or data loss.\n$$$\nTest Data:\n- Input data with potential SQL injection attempts as listed in the Test Steps.\n$$$\nTest Execution:\n\nTest Environment: Browser (e.g., Google Chrome, Mozilla Firefox, etc.)\n\nPreconditions:\n- The web application URL is accessible and functional.\n- The web application features the necessary input fields and database interactions.\n\nTest Execution Steps:\n1. Open the web application URL in the chosen browser.\n2. Navigate to the page or feature that involves user input and database interaction (e.g., login page).\n3. Wait for the page to load completely.\n\nTest Case Execution:\n1. Input the first SQL injection attempt (' OR 1=1; --) in the email field and a random password in the password field.\n2. Attempt to log in or trigger the action associated with the login form.\n3. Observe the application's response to the SQL injection attempt.\n4. Repeat steps 1-3 for the other SQL injection attempts listed in the Test Steps.\n\nTest Case Result:\n- If the web application successfully prevents SQL injection attempts and handles the input securely, mark the test as Pass.\n- If the web application does not properly handle SQL injection attempts and allows unauthorized access or executes malicious queries, mark the test as Fail.\n\nTest Notes:\n- Input validation and protection against SQL injection are critical security measures to prevent unauthorized access and protect sensitive data.\n- Conduct regular security testing and vulnerability assessments to identify potential security weaknesses and implement necessary security measures.\n- Test different input scenarios to cover various SQL injection attack vectors.\n##\nGenerate a test case on Security test case for ${query}. Before and after Test Data, place '$$$' as shown.\n`
            break;
        case 'Integration test case':
            ques = `Generate a test case on Integration test case for Verifying User Registration and Login Functionality. Before and after Test Data, place '$$$' as shown.\n\nTest Case Name: Integration Test Case - Verify User Registration and Login Functionality\n\nTest Objective: To verify the integration between the User Registration and Login functionalities of the web application.\n\nUnits under Test: User Registration Functionality and Login Functionality\n\nTest Scenario:\n1. Open the web application in the browser.\n2. Access the User Registration page.\n3. Register a new user by providing valid details (e.g., name, email, password).\n4. Log out from the application.\n5. Access the Login page.\n6. Log in using the credentials of the newly registered user.\n\nTest Steps:\n1. Open the web application in the browser.\n2. Navigate to the User Registration page.\n3. Fill in the required fields with valid data (e.g., name, email, password).\n4. Click the \"Submit\" button to register the new user.\n5. Wait for the registration to complete and the user to be redirected to the login page.\n6. Click on the \"Logout\" or \"Sign Out\" link to log out from the application.\n7. Wait for the logout process to complete.\n8. Access the Login page.\n9. Enter the email and password of the newly registered user.\n10. Click the \"Login\" button to log in.\n\nExpected Results:\n- The user registration process should be successful, and the user should be redirected to the login page.\n- The logout process should be successful, and the user should be logged out from the application.\n- The login process should be successful using the credentials of the newly registered user, and the user should be redirected to the application's home/dashboard page.\n\nPass Criteria:\n- The user registration, logout, and login processes should all complete successfully without any errors or issues.\n- The registered user should be able to log in using the provided credentials after registration.\n$$$\nTest Data:\n- Sample valid data for user registration (e.g., name, email, password).\n$$$\nTest Execution:\n\nTest Environment: Browser (e.g., Google Chrome, Mozilla Firefox, etc.)\n\nPreconditions:\n- The web application URL is accessible and functional.\n- The User Registration and Login pages are available and functional.\n\nTest Execution Steps:\n1. Open the web application URL in the chosen browser.\n2. Navigate to the User Registration page.\n3. Wait for the page to load completely.\n\nTest Case Execution:\n1. Fill in the required fields on the User Registration page with sample valid data (e.g., name, email, password).\n2. Click the \"Submit\" button to register the new user.\n3. Wait for the registration process to complete and the user to be redirected to the login page.\n4. Click on the \"Logout\" or \"Sign Out\" link to log out from the application.\n5. Wait for the logout process to complete.\n6. Access the Login page.\n7. Enter the email and password of the newly registered user.\n8. Click the \"Login\" button to log in.\n\nTest Case Result:\n- If all the steps complete successfully without any errors, and the user can log in after registration and logout, mark the test as Pass.\n- If any step fails or encounters issues, mark the test as Fail and provide detailed information about the failure.\n\nTest Notes:\n- Integration tests are essential to ensure that individual units of the application work together harmoniously.\n- Ensure that the test data used for registration and login is valid and matches the required format.\n- The test data for registration and login should be well-documented and easily replicable for future tests.\n##\nGenerate a test case on Integration test case for ${query}. Before and after Test Data, place '$$$' as shown.\n`;
            break;
        case 'Database test case':
            ques = `Generate a test case on Database test case for Verifying User Data Storage and Retrieval. Before and after Test Data, place '$$$' as shown.\n\nTest Case Name: Database Test Case - Verify User Data Storage and Retrieval\n\nTest Objective: To verify the correct storage and retrieval of user data in the database.\n\nDatabase Table: \"users\"\n\nTest Scenario:\n1. Register a new user on the web application.\n2. Retrieve the user's data from the database.\n\nTest Steps:\n\nUser Registration:\n1. Open the web application in the browser.\n2. Access the User Registration page.\n3. Fill in the required fields with valid data (e.g., name, email, password).\n4. Click the \"Register\" or \"Sign Up\" button to register the new user.\n5. Wait for the registration to complete.\n\nUser Data Retrieval:\n1. Connect to the database using appropriate credentials and tools (e.g., MySQL Workbench, phpMyAdmin).\n2. Execute a SQL query to retrieve the user's data from the \"users\" table based on the registered email.\n3. Verify that the retrieved data matches the information provided during registration (e.g., name, email, password).\n4. Verify that the user's data is stored securely (e.g., password is hashed and not stored in plain text).\n\nExpected Results:\n\nUser Registration:\n- The registration process should complete successfully without any errors.\n- The user should receive a confirmation email or notification upon successful registration.\n\nUser Data Retrieval:\n- The SQL query should execute successfully without any errors.\n- The retrieved user data should match the information provided during registration.\n- The password should be stored securely and not visible in plain text.\n\nPass Criteria:\n- The user should be able to register successfully without any issues.\n- The user's data should be stored accurately in the database.\n- The data retrieval query should return the correct user data without any errors.\n$$$\nTest Data:\n- Sample valid data for user registration (e.g., name, email, password).\n$$$\nTest Execution:\n\nTest Environment: Database Management System (e.g., MySQL)\n\nPreconditions:\n- The web application is accessible and functional.\n- The \"users\" table exists in the database, and the necessary fields are defined.\n\nTest Execution Steps:\n\nUser Registration:\n1. Open the web application URL in the chosen browser.\n2. Navigate to the User Registration page.\n3. Wait for the page to load completely.\n\nTest Case Execution:\n1. Fill in the required fields on the User Registration page with sample valid data (e.g., name, email, password).\n2. Click the \"Register\" or \"Sign Up\" button to register the new user.\n3. Wait for the registration process to complete.\n\nUser Data Retrieval:\n1. Connect to the database using appropriate credentials and tools (e.g., MySQL Workbench, phpMyAdmin).\n2. Execute a SQL query to retrieve the user's data from the \"users\" table based on the registered email.\n3. Verify that the retrieved data matches the information provided during registration (e.g., name, email, password).\n4. Verify that the user's data is stored securely and the password is not stored in plain text.\n\nTest Case Result:\n- If all the steps complete successfully without any errors, and the user's data is stored accurately and securely in the database, mark the test as Pass.\n- If any step fails or encounters issues, mark the test as Fail and provide detailed information about the failure.\n\nTest Notes:\n- Database tests are crucial to ensuring the proper storage and retrieval of data.\n- Ensure that the database connection and query execution are handled correctly in the application code.\n- Consider testing various scenarios, such as invalid data, duplicate email, and edge cases during registration and data retrieval.\n##\nGenerate a test case on Database test case for ${query}. Before and after Test Data, place '$$$' as shown.\n`;
            break;
        case 'Usability test case':
            ques = `Generate a test case on Usability test case for Verifying User Registration Process. Before and after Test Data, place three '$$$' as shown(dont miss).\n\nTest Case Name: Usability Test Case - Verify User Registration Process\n\nTest Objective: To verify the user registration process for usability and user-friendliness.\n\nTest Scenario:\n1. Access the user registration page on the web application.\n2. Complete the user registration process.\n\nTest Steps:\n\nUser Registration Page Access:\n1. Open the web application in the browser.\n2. Navigate to the User Registration page.\n3. Wait for the page to load completely.\n\nUser Registration Process:\n1. Verify that the registration page contains clear and concise instructions for the user.\n2. Verify that all required fields are labeled appropriately.\n3. Enter valid data in all required fields (e.g., name, email, password).\n4. Verify that the password is hidden and displayed as bullet points or asterisks for security.\n5. Click the \"Register\" or \"Sign Up\" button to submit the registration form.\n6. Wait for the registration process to complete.\n\nExpected Results:\n\nUser Registration Page Access:\n- The user registration page should load without any errors.\n- The page layout and design should be visually appealing and easy to navigate.\n\nUser Registration Process:\n- The registration form should be user-friendly, and each field should be easily identifiable.\n- Clear error messages should be displayed if any field is left blank or filled incorrectly.\n- The registration process should complete smoothly without any errors or delays.\n- Upon successful registration, the user should receive a confirmation email or notification.\n\nPass Criteria:\n- The user should be able to access the registration page without any issues.\n- The registration form should be easy to understand and fill out.\n- The registration process should complete successfully without any errors or glitches.\n- The user should receive a confirmation email or notification upon successful registration.\n$$$\nTest Data:\n- Sample valid data for user registration (e.g., name, email, password).\n$$$\nTest Execution:\n\nTest Environment: Web Browser\n\nPreconditions:\n- The web application is accessible and functional.\n- The user registration page exists and is correctly linked to other parts of the application.\n\nTest Execution Steps:\n\nUser Registration Page Access:\n1. Open the web application URL in the chosen browser.\n2. Navigate to the User Registration page.\n3. Wait for the page to load completely.\n\nTest Case Execution:\n1. Verify that the registration page contains clear and concise instructions for the user.\n2. Fill in the required fields with sample valid data (e.g., name, email, password).\n3. Verify that the password is hidden and displayed as bullet points or asterisks for security.\n4. Click the \"Register\" or \"Sign Up\" button to submit the registration form.\n5. Wait for the registration process to complete.\n\nTest Case Result:\n- If all the steps complete successfully without any errors, and the user is registered successfully, mark the test as Pass.\n- If any step fails or encounters issues, mark the test as Fail and provide detailed information about the failure.\n\nTest Notes:\n- Usability tests are crucial for assessing the ease of use and user-friendliness of the application.\n- Consider testing the registration process on different devices and browsers to ensure responsiveness.\n- Evaluate the layout, design, and flow of the registration process from a user's perspective.\n- Pay attention to error handling and user feedback during the registration process.\n##\nGenerate a test case on Usability test case for ${query}. Before and after Test Data, place three '$$$' as shown(dont miss).\n`
            break;
        case 'User acceptance test case':
            ques = `Generate a test case on User acceptance test case for Verifying User Profile Update Functionality. Before and after Test Data, place three '$$$' as shown(dont miss).\n\nTest Case Name: User Acceptance Test Case - Verify User Profile Update Functionality\n\nTest Objective: To verify the user profile update functionality from the perspective of end-users.\n\nTest Scenario:\n1. An end-user with a registered account accesses the user profile page on the web application.\n2. The end-user updates their profile information and saves the changes.\n\nTest Steps:\n\n1. End-User Login:\n   a. The end-user receives the URL or link to access the web application.\n   b. The end-user opens the web application in their chosen browser.\n   c. The end-user logs in using their registered account credentials.\n\n2. Accessing User Profile:\n   a. The end-user navigates to their user profile page or clicks on the \"My Profile\" link.\n   b. The end-user waits for the profile page to load completely.\n\n3. Updating Profile Information:\n   a. The end-user edits their profile information, such as name, contact details, and address.\n   b. The end-user selects or updates their profile picture, if applicable.\n   c. The end-user reviews the changes and ensures they are accurate.\n\n4. Saving Profile Changes:\n   a. The end-user clicks the \"Save\" or \"Update\" button to save the changes.\n   b. The end-user waits for the update process to complete.\n\nExpected Results:\n\n1. End-User Login:\n   - The end-user should be able to log in using their registered account credentials without any issues.\n\n2. Accessing User Profile:\n   - The end-user should be able to access their user profile page without any difficulties.\n   - The profile page should load accurately, displaying the current profile information.\n\n3. Updating Profile Information:\n   - The end-user should be able to edit and update their profile information smoothly.\n   - The profile picture upload (if applicable) should work correctly.\n\n4. Saving Profile Changes:\n   - The end-user should be able to save the updated profile information successfully.\n   - The profile update process should complete without any errors or delays.\n\nPass Criteria:\n   - The end-user should be able to update their profile information successfully without any errors.\n   - The updated profile information should be accurately reflected on the user profile page.\n$$$\nTest Data:\n   - Sample valid data for updating profile information (e.g., name, contact details, address).\n   - A sample profile picture for upload (if applicable).\n$$$\nTest Execution:\n\nTest Environment: Web Browser\n\nPreconditions:\n   - The web application is accessible and functional.\n   - The end-user has a registered account on the website.\n\nTest Execution Steps:\n\n1. End-User Login:\n   a. The end-user receives the URL or link to access the web application.\n   b. The end-user opens the web application URL in their chosen browser.\n   c. The end-user logs in using their registered account credentials.\n\n2. Accessing User Profile:\n   a. The end-user navigates to their user profile page or clicks on the \"My Profile\" link.\n   b. The end-user waits for the profile page to load completely.\n\n3. Updating Profile Information:\n   a. The end-user edits their profile information, such as name, contact details, and address.\n   b. The end-user selects or updates their profile picture, if applicable.\n   c. The end-user reviews the changes and ensures they are accurate.\n\n4. Saving Profile Changes:\n   a. The end-user clicks the \"Save\" or \"Update\" button to save the changes.\n   b. The end-user waits for the update process to complete.\n\nTest Case Result:\n   - If all the steps complete successfully without any errors, and the end-user updates their profile information, mark the test as Pass.\n   - If any step fails or encounters issues, mark the test as Fail and provide detailed information about the failure.\n\nTest Notes:\n   - User acceptance tests are crucial for validating the application from the user's perspective.\n   - Involve real end-users in executing the test case to gain valuable feedback.\n   - Consider testing the profile update functionality on different devices and browsers to ensure responsiveness and usability.\n   - Evaluate the profile update flow and user experience from the perspective of end-users.\n##\nGenerate a test case on User acceptance test case for ${query}. Before and after Test Data, place three '$$$' as shown(dont miss).\n`
            break;
        case 'Regression test case':
            ques = `Generate a test case on Regression test case for Verifying Product Search Functionality. Before and after Test Data, place three '$$$' as shown(dont miss).\n\nTest Case Name: Regression Test Case - Verify Product Search Functionality\n\nTest Objective: To verify that the product search functionality works correctly after making changes to the application.\n\nTest Scenario:\n1. The product search functionality was previously working as expected in the application.\n2. Recent changes have been made to the application, including updates to the product search process or related components.\n\nTest Steps:\n\nPrecondition:\n- Ensure that the previous version of the application was functional, and the product search functionality worked without any issues.\n\nTest the Product Search Functionality:\n a. Open the latest version of the application in the chosen browser.\n b. Navigate to the product search page or use the search bar to initiate a product search.\n c. Enter a valid product name or keyword in the search field and click the \"Search\" button.\n\nExpected Results:\n- The product search process should be successful, and the application should display relevant search results.\n- The search results should match the entered product name or keyword, and the displayed product details should be accurate.\n$$$\nTest Data:\n- Valid product names or keywords for conducting the product search.\n$$$\nTest Execution:\n\nTest Environment: Web Browser\n\nPreconditions:\n- The latest version of the application is deployed and accessible.\n\nTest Execution Steps:\n\n1. Open the Latest Version of the Application:\n   - Launch the application URL in the chosen web browser.\n\n2. Navigate to the Product Search Page:\n   a. Click on the \"Search\" icon or navigate to the product search page.\n   b. Check for the presence of any search filters or options.\n\n3. Initiate a Product Search:\n   a. Enter a valid product name or keyword in the search field.\n   b. Click the \"Search\" or \"Find\" button.\n\n4. Expected Results:\n   - The product search process should be successful.\n   - The application should display relevant search results based on the entered product name or keyword.\n   - The displayed product details (e.g., product name, description, price) should be accurate and matching the search criteria.\n\nTest Case Result:\n   - If the product search functionality works as expected without any issues or errors after making changes to the application, mark the test as Pass.\n   - If the product search functionality fails to work correctly or encounters any issues after the changes, mark the test as Fail and provide detailed information about the failure.\n\nTest Notes:\n   - Regression testing is essential to ensure that new changes do not adversely impact existing features.\n   - It is recommended to perform regression testing after each major update or modification to the application.\n   - In addition to the product search functionality, other critical functionalities and features can also be tested during regression testing to ensure overall application stability.\n##\nGenerate a test case on Regression test case for ${query}. Before and after Test Data, place three '$$$' as shown(dont miss).\n`
            break;
        default:
            ques= ``
    }
    // console.log(username,empid, firstName, middleName, lastName, email,mobile, password);
    try{
        const configuration = new Configuration({
            apiKey: "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"
          });
        const openai = new OpenAIApi(configuration);
        const response = await openai.createCompletion({
            model: "text-davinci-003",
            prompt: ques,
            temperature: 0.7,
            max_tokens: 2500,
            top_p: 1,
            frequency_penalty: 0,
            presence_penalty: 0,
            stop: ["##"],
          });
        ans = response.data['choices'][0]
        console.log("sending response...")
        
        // const userDetails = {
        //     mobile,
        //     password,
        //     key
        // };
        // console.log(userDetails)

        res.send(ans)
    }catch(err){
        res.send({
            status : 'failure',
            error  : err.name,
            message : err.message
        });
    }
})

const server = http.createServer(app);
let port = 3000;
server.listen(port, () => {
    console.log(`Running at localhost:${port}`);
});