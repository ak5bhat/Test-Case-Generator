{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { saveAs } from 'file-saver';\nlet AppComponent = class AppComponent {\n  constructor(service) {\n    this.service = service;\n    this.emailOpened = false;\n    this.displayedData = '';\n    this.title = \"\";\n    this.msg = '';\n    this.part1 = '';\n    this.part2 = '';\n    this.part3 = '';\n    this.content = '';\n    this.showBufferAnimation = false;\n  }\n  // subForm !: FormGroup;\n  ngOnInit() {\n    // this.retrieve();\n  }\n  startBufferAnimation() {\n    this.showBufferAnimation = true;\n    setTimeout(() => {\n      this.showBufferAnimation = false;\n    }, 15000);\n  }\n  onClick() {\n    // console.log(this.submitForm);\n    // console.log(this.submitForm['value']);\n    console.log('started===');\n    this.service.send(this.submitForm['value']).subscribe(data => {\n      console.log(\"respose received\");\n      this.displayedData = data['text'];\n      // this.router.navigate(['/'])\n      const parts = this.displayedData.split(\"$$$\", 3);\n      this.part1 = parts[1];\n      this.part2 = parts[0].trimEnd();\n      // const bulk = this.part1.split(\"***\");\n      // this.part1 = bulk[0];\n      // this.part3 = bulk[1];\n      this.part3 = parts[2];\n      this.content = `Test Steps: \\n${this.part1}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Data in ${this.submitForm['value']['lang']} language:\\n${this.part2}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Results:\\n${this.part3}\\n`;\n      // console.log(this.part1);\n      // console.log(this.part2);\n    }, error => {\n      console.log(error);\n    });\n  }\n  //--------------no use --------------\n  // retrieve(): void {\n  //   this.service.receive()\n  //     .subscribe({\n  //       next: (data) => {\n  //         this.ans = data;\n  //         console.log(data);\n  //       },\n  //       error: (e) => console.error(e)\n  //     });\n  // }\n  // retrieve(): void {\n  //   this.service.receive()\n  //     .subscribe(\n  //       (data) => {\n  //         console.log('Response Data:', data);\n  //         this.displayData(data);\n  //       },\n  //       (error) => {\n  //         console.error('Error:',error);\n  //     });\n  // }\n  // displayData(data: any) {\n  //   // Assign the received data to a variable in your component to use it in the template\n  //   this.displayedData = data;\n  // }\n  downloadTextFile() {\n    //if empty cant download\n    // this.content = `Test Steps: \\n${this.part1}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Data in ${this.submitForm['value']['lang']}  language:\\n${this.part2}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Results:\\n${this.part3}\\n`;\n    const fileName = `${this.submitForm['value']['query']} test case in ${this.submitForm['value']['lang']}.txt`;\n    const blob = new Blob([this.content], {\n      type: 'text/plain;charset=utf-8'\n    });\n    saveAs(blob, fileName);\n  }\n  openEmail() {\n    if (this.emailOpened) {\n      return;\n    }\n    // const subject = `Test Steps: \\n${this.part1}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Data in ${this.submitForm['value']['lang']}  language:\\n${this.part2}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Results:\\n${this.part3}\\n`;\n    const subject = `${this.displayedData.split(\"$$$\")}`;\n    // const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}`;\n    // window.location.href = mailtoUrl;\n    // const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}`;\n    // window.open(mailtoUrl, '_blank');\n    // const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}`;\n    // setTimeout(() => {\n    //   window.open(mailtoUrl, '_blank');\n    // }, 100);\n    const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}`;\n    setTimeout(() => {\n      const emailWindow = window.open(mailtoUrl, '_blank');\n      if (emailWindow) {\n        this.emailOpened = true;\n        emailWindow.onbeforeunload = () => {\n          this.emailOpened = false;\n        };\n      }\n    }, 100);\n  }\n};\n__decorate([ViewChild('f')], AppComponent.prototype, \"submitForm\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAUC,SAAS,QAAQ,eAAe;AAG5D,SAAQC,MAAM,QAAO,YAAY;AAQ1B,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAMvBC,YAAoBC,OAAoB;IAApB,YAAO,GAAPA,OAAO;IAL3B,gBAAW,GAAG,KAAK;IAEnB,kBAAa,GAAC,EAAE;IAChB,UAAK,GAAC,EAAE;IAGR,QAAG,GAAG,EAAE;IAMR,UAAK,GAAE,EAAE;IACT,UAAK,GAAE,EAAE;IACT,UAAK,GAAE,EAAE;IACT,YAAO,GAAG,EAAE;IAEZ,wBAAmB,GAAY,KAAK;EAZM;EAE1C;EAEAC,QAAQ;IACN;EAAA;EASFC,oBAAoB;IAClB,IAAI,CAACC,mBAAmB,GAAG,IAAI;IAC/BC,UAAU,CAAC,MAAK;MACd,IAAI,CAACD,mBAAmB,GAAG,KAAK;IAClC,CAAC,EAAE,KAAK,CAAC;EACX;EAEAE,OAAO;IACL;IACA;IACAC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB,IAAI,CAACP,OAAO,CAACQ,IAAI,CAAC,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC,CAAC,CAACC,SAAS,CACnDC,IAAI,IAAG;MACLL,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/B,IAAI,CAACK,aAAa,GAAGD,IAAI,CAAC,MAAM,CAAC;MACjC;MACA,MAAME,KAAK,GAAG,IAAI,CAACD,aAAa,CAACE,KAAK,CAAC,KAAK,EAAC,CAAC,CAAC;MAE/C,IAAI,CAACC,KAAK,GAAGF,KAAK,CAAC,CAAC,CAAC;MACrB,IAAI,CAACG,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACI,OAAO,EAAE;MAE/B;MACA;MACA;MACA,IAAI,CAACC,KAAK,GAAGL,KAAK,CAAC,CAAC,CAAC;MACrB,IAAI,CAACM,OAAO,GAAG,iBAAiB,IAAI,CAACJ,KAAK,oKAAoK,IAAI,CAACN,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,eAAe,IAAI,CAACO,KAAK,sKAAsK,IAAI,CAACE,KAAK,IAAI;MAE3b;MACA;IACF,CAAC,EACDE,KAAK,IAAG;MACNd,OAAO,CAACC,GAAG,CAACa,KAAK,CAAC;IACpB,CAAC,CACF;EACH;EACF;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEAC,gBAAgB;IACd;IACA;IACA,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACb,UAAU,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,iBAAiB,IAAI,CAACA,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM;IAE5G,MAAMc,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,IAAI,CAACL,OAAO,CAAC,EAAE;MAAEM,IAAI,EAAE;IAA0B,CAAE,CAAC;IAC3E5B,MAAM,CAAC0B,IAAI,EAAED,QAAQ,CAAC;EACxB;EAEAI,SAAS;IACP,IAAI,IAAI,CAACC,WAAW,EAAE;MACpB;;IAEF;IACA,MAAMC,OAAO,GAAG,GAAG,IAAI,CAAChB,aAAa,CAACE,KAAK,CAAC,KAAK,CAAC,EAAE;IACpD;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA,MAAMe,SAAS,GAAG,mBAAmBC,kBAAkB,CAACF,OAAO,CAAC,EAAE;IAClExB,UAAU,CAAC,MAAK;MACd,MAAM2B,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACJ,SAAS,EAAE,QAAQ,CAAC;MACpD,IAAIE,WAAW,EAAE;QACf,IAAI,CAACJ,WAAW,GAAG,IAAI;QACvBI,WAAW,CAACG,cAAc,GAAG,MAAK;UAChC,IAAI,CAACP,WAAW,GAAG,KAAK;QAC1B,CAAC;;IAEL,CAAC,EAAE,GAAG,CAAC;EACT;CACD;AAtHiBQ,YAAfvC,SAAS,CAAC,GAAG,CAAC,gDAAqB;AAFzBE,YAAY,eANxBH,SAAS,CAAC;EACTyC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,GAEWxC,YAAY,CAwHxB;SAxHYA,YAAY","names":["Component","ViewChild","saveAs","AppComponent","constructor","service","ngOnInit","startBufferAnimation","showBufferAnimation","setTimeout","onClick","console","log","send","submitForm","subscribe","data","displayedData","parts","split","part1","part2","trimEnd","part3","content","error","downloadTextFile","fileName","blob","Blob","type","openEmail","emailOpened","subject","mailtoUrl","encodeURIComponent","emailWindow","window","open","onbeforeunload","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\myprojects\\mine\\generator\\frontend\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ApiService } from './api.service';\nimport {saveAs} from 'file-saver';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit{\n  emailOpened = false;\n  @ViewChild('f') submitForm!: NgForm;\n  displayedData=''\n  title=\"\";\n\n  constructor(private service : ApiService){}\n  msg = '';\n  // subForm !: FormGroup;\n  \n  ngOnInit(): void {\n    // this.retrieve();\n  }\n  part1= ''\n  part2= ''\n  part3= ''\n  content = ''\n\n  showBufferAnimation: boolean = false;\n\n  startBufferAnimation() {\n    this.showBufferAnimation = true;\n    setTimeout(() => {\n      this.showBufferAnimation = false;\n    }, 15000);\n  }\n\n  onClick(){\n    // console.log(this.submitForm);\n    // console.log(this.submitForm['value']);\n    console.log('started===')\n    this.service.send(this.submitForm['value']).subscribe(\n      data =>{\n        console.log(\"respose received\");\n        this.displayedData = data['text'];\n        // this.router.navigate(['/'])\n        const parts = this.displayedData.split(\"$$$\",3);\n\n        this.part1 = parts[1];\n        this.part2 = parts[0].trimEnd();\n\n        // const bulk = this.part1.split(\"***\");\n        // this.part1 = bulk[0];\n        // this.part3 = bulk[1];\n        this.part3 = parts[2];\n        this.content = `Test Steps: \\n${this.part1}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Data in ${this.submitForm['value']['lang']} language:\\n${this.part2}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Results:\\n${this.part3}\\n`;\n        \n        // console.log(this.part1);\n        // console.log(this.part2);\n      },\n      error => {\n        console.log(error);\n      }\n    )\n  } \n//--------------no use --------------\n  // retrieve(): void {\n  //   this.service.receive()\n  //     .subscribe({\n  //       next: (data) => {\n  //         this.ans = data;\n  //         console.log(data);\n  //       },\n  //       error: (e) => console.error(e)\n  //     });\n  // }\n\n  // retrieve(): void {\n  //   this.service.receive()\n  //     .subscribe(\n  //       (data) => {\n  //         console.log('Response Data:', data);\n  //         this.displayData(data);\n  //       },\n  //       (error) => {\n  //         console.error('Error:',error);\n  //     });\n  // }\n\n  // displayData(data: any) {\n  //   // Assign the received data to a variable in your component to use it in the template\n  //   this.displayedData = data;\n  // }\n\n  downloadTextFile() {\n    //if empty cant download\n    // this.content = `Test Steps: \\n${this.part1}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Data in ${this.submitForm['value']['lang']}  language:\\n${this.part2}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Results:\\n${this.part3}\\n`;\n    const fileName = `${this.submitForm['value']['query']} test case in ${this.submitForm['value']['lang']}.txt`;\n\n    const blob = new Blob([this.content], { type: 'text/plain;charset=utf-8' });\n    saveAs(blob, fileName);\n  }\n\n  openEmail() {\n    if (this.emailOpened) {\n      return;\n    }\n    // const subject = `Test Steps: \\n${this.part1}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Data in ${this.submitForm['value']['lang']}  language:\\n${this.part2}\\n**********************************************************************\\n**********************************************************************\\n\\nTest Results:\\n${this.part3}\\n`;\n    const subject = `${this.displayedData.split(\"$$$\")}`\n    // const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}`;\n    // window.location.href = mailtoUrl;\n    // const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}`;\n    // window.open(mailtoUrl, '_blank');\n    \n    // const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}`;\n    // setTimeout(() => {\n    //   window.open(mailtoUrl, '_blank');\n    // }, 100);\n    \n    const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}`; \n    setTimeout(() => {\n      const emailWindow = window.open(mailtoUrl, '_blank');\n      if (emailWindow) {\n        this.emailOpened = true;\n        emailWindow.onbeforeunload = () => {\n          this.emailOpened = false;\n        };\n      }\n    }, 100);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}